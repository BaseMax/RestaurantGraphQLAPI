# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  name: String!
  role: Float!
}

type AuthPayload {
  user: User!
  token: String!
}

type Contact {
  email: String
  phone: String
}

type OpeningHour {
  day: Weekday!
  hours: String!
}

enum Weekday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

type Location {
  longitude: Float!
  latitude: Float!
}

type Restaurant {
  id: ID!
  name: String!
  location: Location!
  address: String!
  distance(location: LocationInput!): Int!
  rating: Float!
  cuisine: String!
  contact: Contact
  openingHours: [OpeningHour!]
}

input LocationInput {
  longitude: Float!
  latitude: Float!
}

type Food {
  id: ID!
  name: String!
  description: String!
  price: Float!
}

type Query {
  user: User!
  restaurants(query: SearchRestaurantsInput!): [Restaurant!]!
  restaurant(id: ID!): Restaurant!
  food(id: ID!): Food!
  foods(restaurantId: ID!, pagination: Pagination!): [Food!]!
}

input SearchRestaurantsInput {
  limit: Int! = 16
  skip: Int! = 0
  nearBy: NearByInput
  name: String
  cuisine: String
  city: String
  minPrice: Float
  maxPrice: Float
}

input NearByInput {
  radius: Float!
  longitude: Float!
  latitude: Float!
}

input Pagination {
  limit: Int! = 16
  skip: Int! = 0
}

type Mutation {
  register(input: RegisterUserInput!): AuthPayload!
  login(input: LoginUserInput!): AuthPayload!
  createRestaurant(input: CreateRestaurantInput!): Restaurant!
  updateRestaurant(input: UpdateRestaurantInput!): Restaurant!
  deleteRestaurant(id: String!): Boolean!
  createFood(input: CreateFoodInput!): Food!
  updateFood(input: UpdateFoodInput!): Food!
  deleteFood(id: String!): Boolean!
}

input RegisterUserInput {
  email: String!
  name: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateRestaurantInput {
  name: String!
  location: LocationInput!
  address: String!
  rating: Float!
  cuisine: String!
  contact: ContactInput
  openingHours: [OpeningHourInput!]
}

input ContactInput {
  email: String
  phone: String
}

input OpeningHourInput {
  day: Weekday!
  hours: String!
}

input UpdateRestaurantInput {
  name: String
  location: LocationInput
  address: String
  rating: Float
  cuisine: String
  contact: ContactInput
  openingHours: [OpeningHourInput!]
  id: ID!
}

input CreateFoodInput {
  name: String!
  description: String!
  price: Float!
  restaurantId: ID!
}

input UpdateFoodInput {
  name: String
  description: String
  price: Float
  restaurantId: ID
  id: ID!
}